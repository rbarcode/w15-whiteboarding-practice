Question #1: Turning Strings to URLs

URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.
Example

Input: "Jasmine Ann Jones"
Output: "Jasmine%20Ann%20Jones"




JavaScript Solution Without Recursion (Unsolved)

function urlify(string) {
  let url = "";
  for (let i = 0; i < string.length; i++) {
    if (string[i] === " ") {
      url.concat("%20");
    } else {
      url.concat(string[i]);
    }
  }
  return url;
}




JavaScript Solution With Recursion (Unsolved)

function urlify(string) {
  if (typeof(string) != "string") {
    return;
  }
  if (string === "") {
    return;
  }
  if (string.lastIndexOf(" ") != -1) {
  return urlify(string.substring(0, string.lastIndexOf(" ")).trim()) + "%20" + string.slice(string.length - 1, string.indexOf(" "));
  } else {
    return string;
  }
}



C# Solution Without Recursion

string Urlify(string str)
{
  url = "";
  for (int i = 0; i < str.Length; i++)
  {
    if (str[i] == char.Parse(" "))
    {
      url += "%20";
    }
    else
    {
      url += str[i];
    }
  }
  return url;
}





Question #2: Array Deduping (Unsolved)

Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.
Example

Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]


function dedupe(arr) {
  let dedupedArr = [];

  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < dedupedArr.length; j++) {
      if (arr[i] === dedupedArr[j]) {
        break;
      }
      break;
    }
    dedupedArr.push(arr[i]);
  }
  return dedupedArr;
}

dedupe([1,2,3,3,4,"hi",9,"hi","bye"]);



Question #3: Compressing Strings

Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.
Example

Input: "aaabccdddda"

Output: "3ab2c4da"

function compressStr(str) {
  let compressedStr = "";
  let testStr = "test";
  let counter = 1;
  for (let i = 0; i < str.length; i++) {
    if (str[i] === str[i + 1]) {
      counter++;
    } else if (counter > 1) {
      compressedStr.concat(counter + str[i]);
      counter = 1;
    } else {
      compressedStr.concat(str[i]);
    }
  }
  return compressedStr;
}